name: Main Workflow

on:
  # push:
  #   branches:
  #     - dev
  workflow_dispatch:
  
jobs:
  verify:
    name: Unit-Testing, Code Coverage and SonarCloud Review
    runs-on: ubuntu-22.04
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      PIP_ROOT_USER_ACTION: ignore

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          
      - name: Checkout private repo
        uses: actions/checkout@v4.1.1
        with:
          repository: wuerthcs/flywheel-frontend
          token: ${{ secrets.PAT1 }}
          path: flywheel-frontend
        # Shallow clones should be disabled for a better relevancy of analysis
        

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'

      - name: Install lambda layers as packages
        run: |
          pip3 install -e src/layers/data_access_layer/
          pip3 install -e src/layers/helper_layer/
          pip3 install -e src/layers/business_logic_layer/

      - name: Install Dependencies
        run: |
          pip3 install -r requirements.txt
          pip3 install pytest pytest-mock pytest-cov

      - name: Run tests with coverage
        run: pytest --cov=./ --cov-report=xml
        env:
          TABLE_NAME: DONTCARE
        working-directory: .

      - name: Fix coverage paths
        run: |
          sed -i 's|/home/runner/work/flywheel-backend/flywheel-backend|.|g' coverage.xml

      - name: Publish test results
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: coverage.xml
          reporter: junit
          fail-on-error: false






































# name: Deploy Workflow

# on:
#   push:
#     branches: 
#       - dev
#       - stage
#       - prod

# jobs:
#   Deploy:
#     name: main
#     timeout-minutes: 15
#     runs-on: ubuntu-22.04
          
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v4.1.1
#         with:
#           fetch-depth: 2

#       - name: Check out code
#         uses: actions/checkout@v4.1.1
#         with:
#           repository: wuerthcs/flywheel-frontend
#           path: flywheel-frontend

      
      # - name: Mapping for slack notification
      #   uses: lineashub/variable-mapper@master
      #   with:
      #     key: "${{ github.ref_name }}"
      #     map: |
      #       {
      #         "dev": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_DEV }}",
      #           "SLACK_CHANNEL": "deploy-dev"
      #         },
      #         "stage": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_STAGE }}",
      #           "SLACK_CHANNEL": "deploy-stage"
      #         },
      #         "prod": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_PROD }}",
      #           "SLACK_CHANNEL": "deploy-prod"
      #         }
      #       }

      # - name: Cypress tests for stage
      #   if: github.ref == 'refs/heads/stage'
      #   uses: peter-evans/repository-dispatch@v3
      #   with:
      #     token: ${{ secrets.WCS_GITHUB_TOKEN }}
      #     repository: wuerthcs/flywheel-e2e-tests
      #     event-type: e2e-test-event
          

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version-file: '.nvmrc'

      # - name: Install Yarn
      #   run: corepack enable &&
      #        corepack prepare yarn@stable --activate
      
      # - name: Update dependencies
      #   run: yarn install --immutable
      
      # - name: Compile development branch
      #   run: yarn build
      #   env:
      #     CI_ENV: ${{ github.ref_name }}
        
      # - name: Install copilot
      #   uses: ksivamuthu/aws-copilot-github-action@v0.0.7
      #   with:
      #     command: install
        
      # - name: Login to AWS account
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: eu-central-1
        
      # # TODO Should be done directly w/ copilot action above, but it does not (yet) support `--all` flag
      # - name: Deploy to AWS
      #   run: copilot deploy --all --env ${{ github.ref_name }}
        
      
      
      # - name: Mapping for slack notification
      #   uses: kanga333/variable-mapper@v0.3.0
      #   with:
      #     key: "${{ github.ref_name }}"
      #     map: |
      #       {
      #         "dev": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_DEV }}",
      #         },
      #         "stage": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_STAGE }}",
      #         },
      #         "prod": {
      #           "SLACK_WEBHOOK": "${{ secrets.SLACK_WEBHOOK_PROD }}"
      #         }
      #       }
      
      # - name: Slack success
      #   uses: rtCamp/action-slack-notify@master
      #   env:
      #     SLACK_TITLE: "${{ github.job }} on ${{ github.repository }} has been Successful!"
      #     SLACK_COLOR: "#228B22"
      #     SLACK_MESSAGE: "${{ github.event.pull_request.head.ref }} has triggered this run"
      #     SLACK_FOOTER: " "
      #     MSG_MINIMAL: "Ref,Actions URL,Commit"
      #   if: success() && github.ref == 'refs/heads/dev'

      # - name: Slack failure
      #   uses: rtCamp/action-slack-notify@master
      #   env:
      #     SLACK_TITLE: "${{ github.job }} on ${{ github.repository }} has Failed!"
      #     SLACK_COLOR: "##E01E5A"
      #     SLACK_MESSAGE: "${{ github.event.pull_request.head.ref  }} has triggered this run"
      #     SLACK_FOOTER: " "
      #     MSG_MINIMAL: "Ref,Actions URL,Commit"
      #   if: failure() && github.ref == 'refs/heads/dev'
      # #   if: failure() && github.ref == 'refs/heads/dev'

      
